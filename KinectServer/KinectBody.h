// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KinectServer/KinectBody.proto

#ifndef PROTOBUF_KinectServer_2fKinectBody_2eproto__INCLUDED
#define PROTOBUF_KinectServer_2fKinectBody_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
void protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto();
void protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto();

class KBJoint;
class KBJointOrientation;
class KBJoint_KBDepthSpacePoint;
class KBKinectBodies;
class KBKinectBody;
class KBVector4;

enum KBJoint_KBTrackingState {
  KBJoint_KBTrackingState_NOT_TRACKED = 0,
  KBJoint_KBTrackingState_INFERRED = 1,
  KBJoint_KBTrackingState_TRACKED = 2,
  KBJoint_KBTrackingState_KBJoint_KBTrackingState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KBJoint_KBTrackingState_KBJoint_KBTrackingState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KBJoint_KBTrackingState_IsValid(int value);
const KBJoint_KBTrackingState KBJoint_KBTrackingState_KBTrackingState_MIN = KBJoint_KBTrackingState_NOT_TRACKED;
const KBJoint_KBTrackingState KBJoint_KBTrackingState_KBTrackingState_MAX = KBJoint_KBTrackingState_TRACKED;
const int KBJoint_KBTrackingState_KBTrackingState_ARRAYSIZE = KBJoint_KBTrackingState_KBTrackingState_MAX + 1;

const ::google::protobuf::EnumDescriptor* KBJoint_KBTrackingState_descriptor();
inline const ::std::string& KBJoint_KBTrackingState_Name(KBJoint_KBTrackingState value) {
  return ::google::protobuf::internal::NameOfEnum(
    KBJoint_KBTrackingState_descriptor(), value);
}
inline bool KBJoint_KBTrackingState_Parse(
    const ::std::string& name, KBJoint_KBTrackingState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KBJoint_KBTrackingState>(
    KBJoint_KBTrackingState_descriptor(), name, value);
}
enum KBKinectBody_KBHandState {
  KBKinectBody_KBHandState_UNKNOWN = 0,
  KBKinectBody_KBHandState_NOT_TRACKED = 1,
  KBKinectBody_KBHandState_OPEN = 2,
  KBKinectBody_KBHandState_CLOSED = 3,
  KBKinectBody_KBHandState_LASSO = 4,
  KBKinectBody_KBHandState_KBKinectBody_KBHandState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KBKinectBody_KBHandState_KBKinectBody_KBHandState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KBKinectBody_KBHandState_IsValid(int value);
const KBKinectBody_KBHandState KBKinectBody_KBHandState_KBHandState_MIN = KBKinectBody_KBHandState_UNKNOWN;
const KBKinectBody_KBHandState KBKinectBody_KBHandState_KBHandState_MAX = KBKinectBody_KBHandState_LASSO;
const int KBKinectBody_KBHandState_KBHandState_ARRAYSIZE = KBKinectBody_KBHandState_KBHandState_MAX + 1;

const ::google::protobuf::EnumDescriptor* KBKinectBody_KBHandState_descriptor();
inline const ::std::string& KBKinectBody_KBHandState_Name(KBKinectBody_KBHandState value) {
  return ::google::protobuf::internal::NameOfEnum(
    KBKinectBody_KBHandState_descriptor(), value);
}
inline bool KBKinectBody_KBHandState_Parse(
    const ::std::string& name, KBKinectBody_KBHandState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KBKinectBody_KBHandState>(
    KBKinectBody_KBHandState_descriptor(), name, value);
}
enum KBKinectBody_KBTrackingConfidence {
  KBKinectBody_KBTrackingConfidence_LOW = 0,
  KBKinectBody_KBTrackingConfidence_HIGH = 1,
  KBKinectBody_KBTrackingConfidence_KBKinectBody_KBTrackingConfidence_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KBKinectBody_KBTrackingConfidence_KBKinectBody_KBTrackingConfidence_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KBKinectBody_KBTrackingConfidence_IsValid(int value);
const KBKinectBody_KBTrackingConfidence KBKinectBody_KBTrackingConfidence_KBTrackingConfidence_MIN = KBKinectBody_KBTrackingConfidence_LOW;
const KBKinectBody_KBTrackingConfidence KBKinectBody_KBTrackingConfidence_KBTrackingConfidence_MAX = KBKinectBody_KBTrackingConfidence_HIGH;
const int KBKinectBody_KBTrackingConfidence_KBTrackingConfidence_ARRAYSIZE = KBKinectBody_KBTrackingConfidence_KBTrackingConfidence_MAX + 1;

const ::google::protobuf::EnumDescriptor* KBKinectBody_KBTrackingConfidence_descriptor();
inline const ::std::string& KBKinectBody_KBTrackingConfidence_Name(KBKinectBody_KBTrackingConfidence value) {
  return ::google::protobuf::internal::NameOfEnum(
    KBKinectBody_KBTrackingConfidence_descriptor(), value);
}
inline bool KBKinectBody_KBTrackingConfidence_Parse(
    const ::std::string& name, KBKinectBody_KBTrackingConfidence* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KBKinectBody_KBTrackingConfidence>(
    KBKinectBody_KBTrackingConfidence_descriptor(), name, value);
}
enum KBJointType {
  SPINE_BASE = 0,
  SPINE_MID = 1,
  NECK = 2,
  HEAD = 3,
  SHOULDER_LEFT = 4,
  ELBOW_LEFT = 5,
  WRIST_LEFT = 6,
  HAND_LEFT = 7,
  SHOULDER_RIGHT = 8,
  ELBOW_RIGHT = 9,
  WRIST_RIGHT = 10,
  HAND_RIGHT = 11,
  HIP_LEFT = 12,
  KNEE_LEFT = 13,
  ANKLE_LEFT = 14,
  FOOT_LEFT = 15,
  HIP_RIGHT = 16,
  KNEE_RIGHT = 17,
  ANKLE_RIGHT = 18,
  FOOT_RIGHT = 19,
  SPINE_SHOULDER = 20,
  HAND_TIP_LEFT = 21,
  THUMB_LEFT = 22,
  HAND_TIP_RIGHT = 23,
  THUMB_RIGHT = 24,
  KBJointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KBJointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KBJointType_IsValid(int value);
const KBJointType KBJointType_MIN = SPINE_BASE;
const KBJointType KBJointType_MAX = THUMB_RIGHT;
const int KBJointType_ARRAYSIZE = KBJointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KBJointType_descriptor();
inline const ::std::string& KBJointType_Name(KBJointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KBJointType_descriptor(), value);
}
inline bool KBJointType_Parse(
    const ::std::string& name, KBJointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KBJointType>(
    KBJointType_descriptor(), name, value);
}
// ===================================================================

class KBVector4 : public ::google::protobuf::Message {
 public:
  KBVector4();
  virtual ~KBVector4();

  KBVector4(const KBVector4& from);

  inline KBVector4& operator=(const KBVector4& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KBVector4& default_instance();

  void Swap(KBVector4* other);

  // implements Message ----------------------------------------------

  inline KBVector4* New() const { return New(NULL); }

  KBVector4* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KBVector4& from);
  void MergeFrom(const KBVector4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KBVector4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:KBVector4)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto();

  void InitAsDefaultInstance();
  static KBVector4* default_instance_;
};
// -------------------------------------------------------------------

class KBJoint_KBDepthSpacePoint : public ::google::protobuf::Message {
 public:
  KBJoint_KBDepthSpacePoint();
  virtual ~KBJoint_KBDepthSpacePoint();

  KBJoint_KBDepthSpacePoint(const KBJoint_KBDepthSpacePoint& from);

  inline KBJoint_KBDepthSpacePoint& operator=(const KBJoint_KBDepthSpacePoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KBJoint_KBDepthSpacePoint& default_instance();

  void Swap(KBJoint_KBDepthSpacePoint* other);

  // implements Message ----------------------------------------------

  inline KBJoint_KBDepthSpacePoint* New() const { return New(NULL); }

  KBJoint_KBDepthSpacePoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KBJoint_KBDepthSpacePoint& from);
  void MergeFrom(const KBJoint_KBDepthSpacePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KBJoint_KBDepthSpacePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:KBJoint.KBDepthSpacePoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto();

  void InitAsDefaultInstance();
  static KBJoint_KBDepthSpacePoint* default_instance_;
};
// -------------------------------------------------------------------

class KBJoint : public ::google::protobuf::Message {
 public:
  KBJoint();
  virtual ~KBJoint();

  KBJoint(const KBJoint& from);

  inline KBJoint& operator=(const KBJoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KBJoint& default_instance();

  void Swap(KBJoint* other);

  // implements Message ----------------------------------------------

  inline KBJoint* New() const { return New(NULL); }

  KBJoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KBJoint& from);
  void MergeFrom(const KBJoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KBJoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef KBJoint_KBDepthSpacePoint KBDepthSpacePoint;

  typedef KBJoint_KBTrackingState KBTrackingState;
  static const KBTrackingState NOT_TRACKED = KBJoint_KBTrackingState_NOT_TRACKED;
  static const KBTrackingState INFERRED = KBJoint_KBTrackingState_INFERRED;
  static const KBTrackingState TRACKED = KBJoint_KBTrackingState_TRACKED;
  static inline bool KBTrackingState_IsValid(int value) {
    return KBJoint_KBTrackingState_IsValid(value);
  }
  static const KBTrackingState KBTrackingState_MIN =
    KBJoint_KBTrackingState_KBTrackingState_MIN;
  static const KBTrackingState KBTrackingState_MAX =
    KBJoint_KBTrackingState_KBTrackingState_MAX;
  static const int KBTrackingState_ARRAYSIZE =
    KBJoint_KBTrackingState_KBTrackingState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KBTrackingState_descriptor() {
    return KBJoint_KBTrackingState_descriptor();
  }
  static inline const ::std::string& KBTrackingState_Name(KBTrackingState value) {
    return KBJoint_KBTrackingState_Name(value);
  }
  static inline bool KBTrackingState_Parse(const ::std::string& name,
      KBTrackingState* value) {
    return KBJoint_KBTrackingState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .KBJointType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::KBJointType type() const;
  void set_type(::KBJointType value);

  // optional .KBJoint.KBDepthSpacePoint position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::KBJoint_KBDepthSpacePoint& position() const;
  ::KBJoint_KBDepthSpacePoint* mutable_position();
  ::KBJoint_KBDepthSpacePoint* release_position();
  void set_allocated_position(::KBJoint_KBDepthSpacePoint* position);

  // optional .KBJoint.KBTrackingState state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::KBJoint_KBTrackingState state() const;
  void set_state(::KBJoint_KBTrackingState value);

  // @@protoc_insertion_point(class_scope:KBJoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::KBJoint_KBDepthSpacePoint* position_;
  int type_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto();

  void InitAsDefaultInstance();
  static KBJoint* default_instance_;
};
// -------------------------------------------------------------------

class KBJointOrientation : public ::google::protobuf::Message {
 public:
  KBJointOrientation();
  virtual ~KBJointOrientation();

  KBJointOrientation(const KBJointOrientation& from);

  inline KBJointOrientation& operator=(const KBJointOrientation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KBJointOrientation& default_instance();

  void Swap(KBJointOrientation* other);

  // implements Message ----------------------------------------------

  inline KBJointOrientation* New() const { return New(NULL); }

  KBJointOrientation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KBJointOrientation& from);
  void MergeFrom(const KBJointOrientation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KBJointOrientation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .KBJointType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::KBJointType type() const;
  void set_type(::KBJointType value);

  // optional .KBVector4 orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  const ::KBVector4& orientation() const;
  ::KBVector4* mutable_orientation();
  ::KBVector4* release_orientation();
  void set_allocated_orientation(::KBVector4* orientation);

  // @@protoc_insertion_point(class_scope:KBJointOrientation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::KBVector4* orientation_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto();

  void InitAsDefaultInstance();
  static KBJointOrientation* default_instance_;
};
// -------------------------------------------------------------------

class KBKinectBody : public ::google::protobuf::Message {
 public:
  KBKinectBody();
  virtual ~KBKinectBody();

  KBKinectBody(const KBKinectBody& from);

  inline KBKinectBody& operator=(const KBKinectBody& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KBKinectBody& default_instance();

  void Swap(KBKinectBody* other);

  // implements Message ----------------------------------------------

  inline KBKinectBody* New() const { return New(NULL); }

  KBKinectBody* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KBKinectBody& from);
  void MergeFrom(const KBKinectBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KBKinectBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef KBKinectBody_KBHandState KBHandState;
  static const KBHandState UNKNOWN = KBKinectBody_KBHandState_UNKNOWN;
  static const KBHandState NOT_TRACKED = KBKinectBody_KBHandState_NOT_TRACKED;
  static const KBHandState OPEN = KBKinectBody_KBHandState_OPEN;
  static const KBHandState CLOSED = KBKinectBody_KBHandState_CLOSED;
  static const KBHandState LASSO = KBKinectBody_KBHandState_LASSO;
  static inline bool KBHandState_IsValid(int value) {
    return KBKinectBody_KBHandState_IsValid(value);
  }
  static const KBHandState KBHandState_MIN =
    KBKinectBody_KBHandState_KBHandState_MIN;
  static const KBHandState KBHandState_MAX =
    KBKinectBody_KBHandState_KBHandState_MAX;
  static const int KBHandState_ARRAYSIZE =
    KBKinectBody_KBHandState_KBHandState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KBHandState_descriptor() {
    return KBKinectBody_KBHandState_descriptor();
  }
  static inline const ::std::string& KBHandState_Name(KBHandState value) {
    return KBKinectBody_KBHandState_Name(value);
  }
  static inline bool KBHandState_Parse(const ::std::string& name,
      KBHandState* value) {
    return KBKinectBody_KBHandState_Parse(name, value);
  }

  typedef KBKinectBody_KBTrackingConfidence KBTrackingConfidence;
  static const KBTrackingConfidence LOW = KBKinectBody_KBTrackingConfidence_LOW;
  static const KBTrackingConfidence HIGH = KBKinectBody_KBTrackingConfidence_HIGH;
  static inline bool KBTrackingConfidence_IsValid(int value) {
    return KBKinectBody_KBTrackingConfidence_IsValid(value);
  }
  static const KBTrackingConfidence KBTrackingConfidence_MIN =
    KBKinectBody_KBTrackingConfidence_KBTrackingConfidence_MIN;
  static const KBTrackingConfidence KBTrackingConfidence_MAX =
    KBKinectBody_KBTrackingConfidence_KBTrackingConfidence_MAX;
  static const int KBTrackingConfidence_ARRAYSIZE =
    KBKinectBody_KBTrackingConfidence_KBTrackingConfidence_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KBTrackingConfidence_descriptor() {
    return KBKinectBody_KBTrackingConfidence_descriptor();
  }
  static inline const ::std::string& KBTrackingConfidence_Name(KBTrackingConfidence value) {
    return KBKinectBody_KBTrackingConfidence_Name(value);
  }
  static inline bool KBTrackingConfidence_Parse(const ::std::string& name,
      KBTrackingConfidence* value) {
    return KBKinectBody_KBTrackingConfidence_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional .KBKinectBody.KBHandState leftHand = 3;
  void clear_lefthand();
  static const int kLeftHandFieldNumber = 3;
  ::KBKinectBody_KBHandState lefthand() const;
  void set_lefthand(::KBKinectBody_KBHandState value);

  // optional .KBKinectBody.KBHandState rightHand = 4;
  void clear_righthand();
  static const int kRightHandFieldNumber = 4;
  ::KBKinectBody_KBHandState righthand() const;
  void set_righthand(::KBKinectBody_KBHandState value);

  // optional .KBKinectBody.KBTrackingConfidence leftHandConfidence = 5;
  void clear_lefthandconfidence();
  static const int kLeftHandConfidenceFieldNumber = 5;
  ::KBKinectBody_KBTrackingConfidence lefthandconfidence() const;
  void set_lefthandconfidence(::KBKinectBody_KBTrackingConfidence value);

  // optional .KBKinectBody.KBTrackingConfidence rightHandConfidence = 6;
  void clear_righthandconfidence();
  static const int kRightHandConfidenceFieldNumber = 6;
  ::KBKinectBody_KBTrackingConfidence righthandconfidence() const;
  void set_righthandconfidence(::KBKinectBody_KBTrackingConfidence value);

  // optional .KBVector4 clip = 7;
  bool has_clip() const;
  void clear_clip();
  static const int kClipFieldNumber = 7;
  const ::KBVector4& clip() const;
  ::KBVector4* mutable_clip();
  ::KBVector4* release_clip();
  void set_allocated_clip(::KBVector4* clip);

  // repeated .KBJoint joints = 8;
  int joints_size() const;
  void clear_joints();
  static const int kJointsFieldNumber = 8;
  const ::KBJoint& joints(int index) const;
  ::KBJoint* mutable_joints(int index);
  ::KBJoint* add_joints();
  ::google::protobuf::RepeatedPtrField< ::KBJoint >*
      mutable_joints();
  const ::google::protobuf::RepeatedPtrField< ::KBJoint >&
      joints() const;

  // repeated .KBJointOrientation orientations = 9;
  int orientations_size() const;
  void clear_orientations();
  static const int kOrientationsFieldNumber = 9;
  const ::KBJointOrientation& orientations(int index) const;
  ::KBJointOrientation* mutable_orientations(int index);
  ::KBJointOrientation* add_orientations();
  ::google::protobuf::RepeatedPtrField< ::KBJointOrientation >*
      mutable_orientations();
  const ::google::protobuf::RepeatedPtrField< ::KBJointOrientation >&
      orientations() const;

  // @@protoc_insertion_point(class_scope:KBKinectBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 timestamp_;
  int lefthand_;
  int righthand_;
  int lefthandconfidence_;
  int righthandconfidence_;
  ::KBVector4* clip_;
  ::google::protobuf::RepeatedPtrField< ::KBJoint > joints_;
  ::google::protobuf::RepeatedPtrField< ::KBJointOrientation > orientations_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto();

  void InitAsDefaultInstance();
  static KBKinectBody* default_instance_;
};
// -------------------------------------------------------------------

class KBKinectBodies : public ::google::protobuf::Message {
 public:
  KBKinectBodies();
  virtual ~KBKinectBodies();

  KBKinectBodies(const KBKinectBodies& from);

  inline KBKinectBodies& operator=(const KBKinectBodies& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KBKinectBodies& default_instance();

  void Swap(KBKinectBodies* other);

  // implements Message ----------------------------------------------

  inline KBKinectBodies* New() const { return New(NULL); }

  KBKinectBodies* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KBKinectBodies& from);
  void MergeFrom(const KBKinectBodies& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KBKinectBodies* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KBKinectBody body = 1;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 1;
  const ::KBKinectBody& body(int index) const;
  ::KBKinectBody* mutable_body(int index);
  ::KBKinectBody* add_body();
  ::google::protobuf::RepeatedPtrField< ::KBKinectBody >*
      mutable_body();
  const ::google::protobuf::RepeatedPtrField< ::KBKinectBody >&
      body() const;

  // @@protoc_insertion_point(class_scope:KBKinectBodies)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::KBKinectBody > body_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto();
  friend void protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto();

  void InitAsDefaultInstance();
  static KBKinectBodies* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KBVector4

// optional float x = 1;
inline void KBVector4::clear_x() {
  x_ = 0;
}
inline float KBVector4::x() const {
  // @@protoc_insertion_point(field_get:KBVector4.x)
  return x_;
}
inline void KBVector4::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:KBVector4.x)
}

// optional float y = 2;
inline void KBVector4::clear_y() {
  y_ = 0;
}
inline float KBVector4::y() const {
  // @@protoc_insertion_point(field_get:KBVector4.y)
  return y_;
}
inline void KBVector4::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:KBVector4.y)
}

// optional float z = 3;
inline void KBVector4::clear_z() {
  z_ = 0;
}
inline float KBVector4::z() const {
  // @@protoc_insertion_point(field_get:KBVector4.z)
  return z_;
}
inline void KBVector4::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:KBVector4.z)
}

// optional float w = 4;
inline void KBVector4::clear_w() {
  w_ = 0;
}
inline float KBVector4::w() const {
  // @@protoc_insertion_point(field_get:KBVector4.w)
  return w_;
}
inline void KBVector4::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:KBVector4.w)
}

// -------------------------------------------------------------------

// KBJoint_KBDepthSpacePoint

// optional float x = 1;
inline void KBJoint_KBDepthSpacePoint::clear_x() {
  x_ = 0;
}
inline float KBJoint_KBDepthSpacePoint::x() const {
  // @@protoc_insertion_point(field_get:KBJoint.KBDepthSpacePoint.x)
  return x_;
}
inline void KBJoint_KBDepthSpacePoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.KBDepthSpacePoint.x)
}

// optional float y = 2;
inline void KBJoint_KBDepthSpacePoint::clear_y() {
  y_ = 0;
}
inline float KBJoint_KBDepthSpacePoint::y() const {
  // @@protoc_insertion_point(field_get:KBJoint.KBDepthSpacePoint.y)
  return y_;
}
inline void KBJoint_KBDepthSpacePoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.KBDepthSpacePoint.y)
}

// -------------------------------------------------------------------

// KBJoint

// optional .KBJointType type = 1;
inline void KBJoint::clear_type() {
  type_ = 0;
}
inline ::KBJointType KBJoint::type() const {
  // @@protoc_insertion_point(field_get:KBJoint.type)
  return static_cast< ::KBJointType >(type_);
}
inline void KBJoint::set_type(::KBJointType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.type)
}

// optional .KBJoint.KBDepthSpacePoint position = 2;
inline bool KBJoint::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void KBJoint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::KBJoint_KBDepthSpacePoint& KBJoint::position() const {
  // @@protoc_insertion_point(field_get:KBJoint.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::KBJoint_KBDepthSpacePoint* KBJoint::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::KBJoint_KBDepthSpacePoint;
  }
  // @@protoc_insertion_point(field_mutable:KBJoint.position)
  return position_;
}
inline ::KBJoint_KBDepthSpacePoint* KBJoint::release_position() {
  
  ::KBJoint_KBDepthSpacePoint* temp = position_;
  position_ = NULL;
  return temp;
}
inline void KBJoint::set_allocated_position(::KBJoint_KBDepthSpacePoint* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KBJoint.position)
}

// optional .KBJoint.KBTrackingState state = 4;
inline void KBJoint::clear_state() {
  state_ = 0;
}
inline ::KBJoint_KBTrackingState KBJoint::state() const {
  // @@protoc_insertion_point(field_get:KBJoint.state)
  return static_cast< ::KBJoint_KBTrackingState >(state_);
}
inline void KBJoint::set_state(::KBJoint_KBTrackingState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.state)
}

// -------------------------------------------------------------------

// KBJointOrientation

// optional .KBJointType type = 1;
inline void KBJointOrientation::clear_type() {
  type_ = 0;
}
inline ::KBJointType KBJointOrientation::type() const {
  // @@protoc_insertion_point(field_get:KBJointOrientation.type)
  return static_cast< ::KBJointType >(type_);
}
inline void KBJointOrientation::set_type(::KBJointType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:KBJointOrientation.type)
}

// optional .KBVector4 orientation = 2;
inline bool KBJointOrientation::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
inline void KBJointOrientation::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
inline const ::KBVector4& KBJointOrientation::orientation() const {
  // @@protoc_insertion_point(field_get:KBJointOrientation.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::KBVector4* KBJointOrientation::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::KBVector4;
  }
  // @@protoc_insertion_point(field_mutable:KBJointOrientation.orientation)
  return orientation_;
}
inline ::KBVector4* KBJointOrientation::release_orientation() {
  
  ::KBVector4* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void KBJointOrientation::set_allocated_orientation(::KBVector4* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KBJointOrientation.orientation)
}

// -------------------------------------------------------------------

// KBKinectBody

// optional uint64 id = 1;
inline void KBKinectBody::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KBKinectBody::id() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.id)
  return id_;
}
inline void KBKinectBody::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.id)
}

// optional int64 timestamp = 2;
inline void KBKinectBody::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KBKinectBody::timestamp() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.timestamp)
  return timestamp_;
}
inline void KBKinectBody::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.timestamp)
}

// optional .KBKinectBody.KBHandState leftHand = 3;
inline void KBKinectBody::clear_lefthand() {
  lefthand_ = 0;
}
inline ::KBKinectBody_KBHandState KBKinectBody::lefthand() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.leftHand)
  return static_cast< ::KBKinectBody_KBHandState >(lefthand_);
}
inline void KBKinectBody::set_lefthand(::KBKinectBody_KBHandState value) {
  
  lefthand_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.leftHand)
}

// optional .KBKinectBody.KBHandState rightHand = 4;
inline void KBKinectBody::clear_righthand() {
  righthand_ = 0;
}
inline ::KBKinectBody_KBHandState KBKinectBody::righthand() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.rightHand)
  return static_cast< ::KBKinectBody_KBHandState >(righthand_);
}
inline void KBKinectBody::set_righthand(::KBKinectBody_KBHandState value) {
  
  righthand_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.rightHand)
}

// optional .KBKinectBody.KBTrackingConfidence leftHandConfidence = 5;
inline void KBKinectBody::clear_lefthandconfidence() {
  lefthandconfidence_ = 0;
}
inline ::KBKinectBody_KBTrackingConfidence KBKinectBody::lefthandconfidence() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.leftHandConfidence)
  return static_cast< ::KBKinectBody_KBTrackingConfidence >(lefthandconfidence_);
}
inline void KBKinectBody::set_lefthandconfidence(::KBKinectBody_KBTrackingConfidence value) {
  
  lefthandconfidence_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.leftHandConfidence)
}

// optional .KBKinectBody.KBTrackingConfidence rightHandConfidence = 6;
inline void KBKinectBody::clear_righthandconfidence() {
  righthandconfidence_ = 0;
}
inline ::KBKinectBody_KBTrackingConfidence KBKinectBody::righthandconfidence() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.rightHandConfidence)
  return static_cast< ::KBKinectBody_KBTrackingConfidence >(righthandconfidence_);
}
inline void KBKinectBody::set_righthandconfidence(::KBKinectBody_KBTrackingConfidence value) {
  
  righthandconfidence_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.rightHandConfidence)
}

// optional .KBVector4 clip = 7;
inline bool KBKinectBody::has_clip() const {
  return !_is_default_instance_ && clip_ != NULL;
}
inline void KBKinectBody::clear_clip() {
  if (GetArenaNoVirtual() == NULL && clip_ != NULL) delete clip_;
  clip_ = NULL;
}
inline const ::KBVector4& KBKinectBody::clip() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.clip)
  return clip_ != NULL ? *clip_ : *default_instance_->clip_;
}
inline ::KBVector4* KBKinectBody::mutable_clip() {
  
  if (clip_ == NULL) {
    clip_ = new ::KBVector4;
  }
  // @@protoc_insertion_point(field_mutable:KBKinectBody.clip)
  return clip_;
}
inline ::KBVector4* KBKinectBody::release_clip() {
  
  ::KBVector4* temp = clip_;
  clip_ = NULL;
  return temp;
}
inline void KBKinectBody::set_allocated_clip(::KBVector4* clip) {
  delete clip_;
  clip_ = clip;
  if (clip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KBKinectBody.clip)
}

// repeated .KBJoint joints = 8;
inline int KBKinectBody::joints_size() const {
  return joints_.size();
}
inline void KBKinectBody::clear_joints() {
  joints_.Clear();
}
inline const ::KBJoint& KBKinectBody::joints(int index) const {
  // @@protoc_insertion_point(field_get:KBKinectBody.joints)
  return joints_.Get(index);
}
inline ::KBJoint* KBKinectBody::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:KBKinectBody.joints)
  return joints_.Mutable(index);
}
inline ::KBJoint* KBKinectBody::add_joints() {
  // @@protoc_insertion_point(field_add:KBKinectBody.joints)
  return joints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::KBJoint >*
KBKinectBody::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:KBKinectBody.joints)
  return &joints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::KBJoint >&
KBKinectBody::joints() const {
  // @@protoc_insertion_point(field_list:KBKinectBody.joints)
  return joints_;
}

// repeated .KBJointOrientation orientations = 9;
inline int KBKinectBody::orientations_size() const {
  return orientations_.size();
}
inline void KBKinectBody::clear_orientations() {
  orientations_.Clear();
}
inline const ::KBJointOrientation& KBKinectBody::orientations(int index) const {
  // @@protoc_insertion_point(field_get:KBKinectBody.orientations)
  return orientations_.Get(index);
}
inline ::KBJointOrientation* KBKinectBody::mutable_orientations(int index) {
  // @@protoc_insertion_point(field_mutable:KBKinectBody.orientations)
  return orientations_.Mutable(index);
}
inline ::KBJointOrientation* KBKinectBody::add_orientations() {
  // @@protoc_insertion_point(field_add:KBKinectBody.orientations)
  return orientations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::KBJointOrientation >*
KBKinectBody::mutable_orientations() {
  // @@protoc_insertion_point(field_mutable_list:KBKinectBody.orientations)
  return &orientations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::KBJointOrientation >&
KBKinectBody::orientations() const {
  // @@protoc_insertion_point(field_list:KBKinectBody.orientations)
  return orientations_;
}

// -------------------------------------------------------------------

// KBKinectBodies

// repeated .KBKinectBody body = 1;
inline int KBKinectBodies::body_size() const {
  return body_.size();
}
inline void KBKinectBodies::clear_body() {
  body_.Clear();
}
inline const ::KBKinectBody& KBKinectBodies::body(int index) const {
  // @@protoc_insertion_point(field_get:KBKinectBodies.body)
  return body_.Get(index);
}
inline ::KBKinectBody* KBKinectBodies::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:KBKinectBodies.body)
  return body_.Mutable(index);
}
inline ::KBKinectBody* KBKinectBodies::add_body() {
  // @@protoc_insertion_point(field_add:KBKinectBodies.body)
  return body_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::KBKinectBody >*
KBKinectBodies::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:KBKinectBodies.body)
  return &body_;
}
inline const ::google::protobuf::RepeatedPtrField< ::KBKinectBody >&
KBKinectBodies::body() const {
  // @@protoc_insertion_point(field_list:KBKinectBodies.body)
  return body_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KBJoint_KBTrackingState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KBJoint_KBTrackingState>() {
  return ::KBJoint_KBTrackingState_descriptor();
}
template <> struct is_proto_enum< ::KBKinectBody_KBHandState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KBKinectBody_KBHandState>() {
  return ::KBKinectBody_KBHandState_descriptor();
}
template <> struct is_proto_enum< ::KBKinectBody_KBTrackingConfidence> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KBKinectBody_KBTrackingConfidence>() {
  return ::KBKinectBody_KBTrackingConfidence_descriptor();
}
template <> struct is_proto_enum< ::KBJointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KBJointType>() {
  return ::KBJointType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KinectServer_2fKinectBody_2eproto__INCLUDED
