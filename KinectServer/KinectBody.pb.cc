// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KinectServer/KinectBody.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KinectBody.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KBVector4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KBVector4_reflection_ = NULL;
const ::google::protobuf::Descriptor* KBJoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KBJoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* KBJoint_KBCameraSpacePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KBJoint_KBCameraSpacePoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KBJoint_KBTrackingState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KBJointOrientation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KBJointOrientation_reflection_ = NULL;
const ::google::protobuf::Descriptor* KBKinectBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KBKinectBody_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KBKinectBody_KBHandState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KBKinectBody_KBTrackingConfidence_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KBKinectBodies_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KBKinectBodies_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KBJointType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto() {
  protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KinectServer/KinectBody.proto");
  GOOGLE_CHECK(file != NULL);
  KBVector4_descriptor_ = file->message_type(0);
  static const int KBVector4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBVector4, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBVector4, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBVector4, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBVector4, w_),
  };
  KBVector4_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KBVector4_descriptor_,
      KBVector4::default_instance_,
      KBVector4_offsets_,
      -1,
      -1,
      -1,
      sizeof(KBVector4),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBVector4, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBVector4, _is_default_instance_));
  KBJoint_descriptor_ = file->message_type(1);
  static const int KBJoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint, state_),
  };
  KBJoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KBJoint_descriptor_,
      KBJoint::default_instance_,
      KBJoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(KBJoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint, _is_default_instance_));
  KBJoint_KBCameraSpacePoint_descriptor_ = KBJoint_descriptor_->nested_type(0);
  static const int KBJoint_KBCameraSpacePoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint_KBCameraSpacePoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint_KBCameraSpacePoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint_KBCameraSpacePoint, z_),
  };
  KBJoint_KBCameraSpacePoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KBJoint_KBCameraSpacePoint_descriptor_,
      KBJoint_KBCameraSpacePoint::default_instance_,
      KBJoint_KBCameraSpacePoint_offsets_,
      -1,
      -1,
      -1,
      sizeof(KBJoint_KBCameraSpacePoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint_KBCameraSpacePoint, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJoint_KBCameraSpacePoint, _is_default_instance_));
  KBJoint_KBTrackingState_descriptor_ = KBJoint_descriptor_->enum_type(0);
  KBJointOrientation_descriptor_ = file->message_type(2);
  static const int KBJointOrientation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJointOrientation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJointOrientation, orientation_),
  };
  KBJointOrientation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KBJointOrientation_descriptor_,
      KBJointOrientation::default_instance_,
      KBJointOrientation_offsets_,
      -1,
      -1,
      -1,
      sizeof(KBJointOrientation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJointOrientation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBJointOrientation, _is_default_instance_));
  KBKinectBody_descriptor_ = file->message_type(3);
  static const int KBKinectBody_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, lefthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, righthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, lefthandconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, righthandconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, joints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, orientations_),
  };
  KBKinectBody_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KBKinectBody_descriptor_,
      KBKinectBody::default_instance_,
      KBKinectBody_offsets_,
      -1,
      -1,
      -1,
      sizeof(KBKinectBody),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBody, _is_default_instance_));
  KBKinectBody_KBHandState_descriptor_ = KBKinectBody_descriptor_->enum_type(0);
  KBKinectBody_KBTrackingConfidence_descriptor_ = KBKinectBody_descriptor_->enum_type(1);
  KBKinectBodies_descriptor_ = file->message_type(4);
  static const int KBKinectBodies_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBodies, body_),
  };
  KBKinectBodies_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KBKinectBodies_descriptor_,
      KBKinectBodies::default_instance_,
      KBKinectBodies_offsets_,
      -1,
      -1,
      -1,
      sizeof(KBKinectBodies),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBodies, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KBKinectBodies, _is_default_instance_));
  KBJointType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KinectServer_2fKinectBody_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KBVector4_descriptor_, &KBVector4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KBJoint_descriptor_, &KBJoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KBJoint_KBCameraSpacePoint_descriptor_, &KBJoint_KBCameraSpacePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KBJointOrientation_descriptor_, &KBJointOrientation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KBKinectBody_descriptor_, &KBKinectBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KBKinectBodies_descriptor_, &KBKinectBodies::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto() {
  delete KBVector4::default_instance_;
  delete KBVector4_reflection_;
  delete KBJoint::default_instance_;
  delete KBJoint_reflection_;
  delete KBJoint_KBCameraSpacePoint::default_instance_;
  delete KBJoint_KBCameraSpacePoint_reflection_;
  delete KBJointOrientation::default_instance_;
  delete KBJointOrientation_reflection_;
  delete KBKinectBody::default_instance_;
  delete KBKinectBody_reflection_;
  delete KBKinectBodies::default_instance_;
  delete KBKinectBodies_reflection_;
}

void protobuf_AddDesc_KinectServer_2fKinectBody_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035KinectServer/KinectBody.proto\"7\n\tKBVec"
    "tor4\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n"
    "\001w\030\004 \001(\002\"\363\001\n\007KBJoint\022\032\n\004type\030\001 \001(\0162\014.KBJ"
    "ointType\022-\n\010position\030\002 \001(\0132\033.KBJoint.KBC"
    "ameraSpacePoint\022\'\n\005state\030\004 \001(\0162\030.KBJoint"
    ".KBTrackingState\0325\n\022KBCameraSpacePoint\022\t"
    "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"=\n\017KBTra"
    "ckingState\022\017\n\013NOT_TRACKED\020\000\022\014\n\010INFERRED\020"
    "\001\022\013\n\007TRACKED\020\002\"Q\n\022KBJointOrientation\022\032\n\004"
    "type\030\001 \001(\0162\014.KBJointType\022\037\n\013orientation\030"
    "\002 \001(\0132\n.KBVector4\"\341\003\n\014KBKinectBody\022\n\n\002id"
    "\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\003\022+\n\010leftHand\030\003 "
    "\001(\0162\031.KBKinectBody.KBHandState\022,\n\trightH"
    "and\030\004 \001(\0162\031.KBKinectBody.KBHandState\022>\n\022"
    "leftHandConfidence\030\005 \001(\0162\".KBKinectBody."
    "KBTrackingConfidence\022\?\n\023rightHandConfide"
    "nce\030\006 \001(\0162\".KBKinectBody.KBTrackingConfi"
    "dence\022\030\n\004clip\030\007 \001(\0132\n.KBVector4\022\030\n\006joint"
    "s\030\010 \003(\0132\010.KBJoint\022)\n\014orientations\030\t \003(\0132"
    "\023.KBJointOrientation\"L\n\013KBHandState\022\013\n\007U"
    "NKNOWN\020\000\022\017\n\013NOT_TRACKED\020\001\022\010\n\004OPEN\020\002\022\n\n\006C"
    "LOSED\020\003\022\t\n\005LASSO\020\004\")\n\024KBTrackingConfiden"
    "ce\022\007\n\003LOW\020\000\022\010\n\004HIGH\020\001\"-\n\016KBKinectBodies\022"
    "\033\n\004body\030\001 \003(\0132\r.KBKinectBody*\240\003\n\013KBJoint"
    "Type\022\016\n\nSPINE_BASE\020\000\022\r\n\tSPINE_MID\020\001\022\010\n\004N"
    "ECK\020\002\022\010\n\004HEAD\020\003\022\021\n\rSHOULDER_LEFT\020\004\022\016\n\nEL"
    "BOW_LEFT\020\005\022\016\n\nWRIST_LEFT\020\006\022\r\n\tHAND_LEFT\020"
    "\007\022\022\n\016SHOULDER_RIGHT\020\010\022\017\n\013ELBOW_RIGHT\020\t\022\017"
    "\n\013WRIST_RIGHT\020\n\022\016\n\nHAND_RIGHT\020\013\022\014\n\010HIP_L"
    "EFT\020\014\022\r\n\tKNEE_LEFT\020\r\022\016\n\nANKLE_LEFT\020\016\022\r\n\t"
    "FOOT_LEFT\020\017\022\r\n\tHIP_RIGHT\020\020\022\016\n\nKNEE_RIGHT"
    "\020\021\022\017\n\013ANKLE_RIGHT\020\022\022\016\n\nFOOT_RIGHT\020\023\022\022\n\016S"
    "PINE_SHOULDER\020\024\022\021\n\rHAND_TIP_LEFT\020\025\022\016\n\nTH"
    "UMB_LEFT\020\026\022\022\n\016HAND_TIP_RIGHT\020\027\022\017\n\013THUMB_"
    "RIGHT\020\030b\006proto3", 1375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KinectServer/KinectBody.proto", &protobuf_RegisterTypes);
  KBVector4::default_instance_ = new KBVector4();
  KBJoint::default_instance_ = new KBJoint();
  KBJoint_KBCameraSpacePoint::default_instance_ = new KBJoint_KBCameraSpacePoint();
  KBJointOrientation::default_instance_ = new KBJointOrientation();
  KBKinectBody::default_instance_ = new KBKinectBody();
  KBKinectBodies::default_instance_ = new KBKinectBodies();
  KBVector4::default_instance_->InitAsDefaultInstance();
  KBJoint::default_instance_->InitAsDefaultInstance();
  KBJoint_KBCameraSpacePoint::default_instance_->InitAsDefaultInstance();
  KBJointOrientation::default_instance_->InitAsDefaultInstance();
  KBKinectBody::default_instance_->InitAsDefaultInstance();
  KBKinectBodies::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KinectServer_2fKinectBody_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KinectServer_2fKinectBody_2eproto {
  StaticDescriptorInitializer_KinectServer_2fKinectBody_2eproto() {
    protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  }
} static_descriptor_initializer_KinectServer_2fKinectBody_2eproto_;
const ::google::protobuf::EnumDescriptor* KBJointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBJointType_descriptor_;
}
bool KBJointType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KBVector4::kXFieldNumber;
const int KBVector4::kYFieldNumber;
const int KBVector4::kZFieldNumber;
const int KBVector4::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KBVector4::KBVector4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KBVector4)
}

void KBVector4::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KBVector4::KBVector4(const KBVector4& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KBVector4)
}

void KBVector4::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
}

KBVector4::~KBVector4() {
  // @@protoc_insertion_point(destructor:KBVector4)
  SharedDtor();
}

void KBVector4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KBVector4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KBVector4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBVector4_descriptor_;
}

const KBVector4& KBVector4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  return *default_instance_;
}

KBVector4* KBVector4::default_instance_ = NULL;

KBVector4* KBVector4::New(::google::protobuf::Arena* arena) const {
  KBVector4* n = new KBVector4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KBVector4::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KBVector4*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool KBVector4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KBVector4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KBVector4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KBVector4)
  return false;
#undef DO_
}

void KBVector4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KBVector4)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:KBVector4)
}

::google::protobuf::uint8* KBVector4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KBVector4)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KBVector4)
  return target;
}

int KBVector4::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KBVector4::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KBVector4* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KBVector4>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KBVector4::MergeFrom(const KBVector4& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void KBVector4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KBVector4::CopyFrom(const KBVector4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KBVector4::IsInitialized() const {

  return true;
}

void KBVector4::Swap(KBVector4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KBVector4::InternalSwap(KBVector4* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KBVector4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KBVector4_descriptor_;
  metadata.reflection = KBVector4_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KBVector4

// optional float x = 1;
void KBVector4::clear_x() {
  x_ = 0;
}
 float KBVector4::x() const {
  // @@protoc_insertion_point(field_get:KBVector4.x)
  return x_;
}
 void KBVector4::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:KBVector4.x)
}

// optional float y = 2;
void KBVector4::clear_y() {
  y_ = 0;
}
 float KBVector4::y() const {
  // @@protoc_insertion_point(field_get:KBVector4.y)
  return y_;
}
 void KBVector4::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:KBVector4.y)
}

// optional float z = 3;
void KBVector4::clear_z() {
  z_ = 0;
}
 float KBVector4::z() const {
  // @@protoc_insertion_point(field_get:KBVector4.z)
  return z_;
}
 void KBVector4::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:KBVector4.z)
}

// optional float w = 4;
void KBVector4::clear_w() {
  w_ = 0;
}
 float KBVector4::w() const {
  // @@protoc_insertion_point(field_get:KBVector4.w)
  return w_;
}
 void KBVector4::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:KBVector4.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* KBJoint_KBTrackingState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBJoint_KBTrackingState_descriptor_;
}
bool KBJoint_KBTrackingState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KBJoint_KBTrackingState KBJoint::NOT_TRACKED;
const KBJoint_KBTrackingState KBJoint::INFERRED;
const KBJoint_KBTrackingState KBJoint::TRACKED;
const KBJoint_KBTrackingState KBJoint::KBTrackingState_MIN;
const KBJoint_KBTrackingState KBJoint::KBTrackingState_MAX;
const int KBJoint::KBTrackingState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KBJoint_KBCameraSpacePoint::kXFieldNumber;
const int KBJoint_KBCameraSpacePoint::kYFieldNumber;
const int KBJoint_KBCameraSpacePoint::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KBJoint_KBCameraSpacePoint::KBJoint_KBCameraSpacePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KBJoint.KBCameraSpacePoint)
}

void KBJoint_KBCameraSpacePoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KBJoint_KBCameraSpacePoint::KBJoint_KBCameraSpacePoint(const KBJoint_KBCameraSpacePoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KBJoint.KBCameraSpacePoint)
}

void KBJoint_KBCameraSpacePoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

KBJoint_KBCameraSpacePoint::~KBJoint_KBCameraSpacePoint() {
  // @@protoc_insertion_point(destructor:KBJoint.KBCameraSpacePoint)
  SharedDtor();
}

void KBJoint_KBCameraSpacePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KBJoint_KBCameraSpacePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KBJoint_KBCameraSpacePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBJoint_KBCameraSpacePoint_descriptor_;
}

const KBJoint_KBCameraSpacePoint& KBJoint_KBCameraSpacePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  return *default_instance_;
}

KBJoint_KBCameraSpacePoint* KBJoint_KBCameraSpacePoint::default_instance_ = NULL;

KBJoint_KBCameraSpacePoint* KBJoint_KBCameraSpacePoint::New(::google::protobuf::Arena* arena) const {
  KBJoint_KBCameraSpacePoint* n = new KBJoint_KBCameraSpacePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KBJoint_KBCameraSpacePoint::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KBJoint_KBCameraSpacePoint*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool KBJoint_KBCameraSpacePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KBJoint.KBCameraSpacePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KBJoint.KBCameraSpacePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KBJoint.KBCameraSpacePoint)
  return false;
#undef DO_
}

void KBJoint_KBCameraSpacePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KBJoint.KBCameraSpacePoint)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:KBJoint.KBCameraSpacePoint)
}

::google::protobuf::uint8* KBJoint_KBCameraSpacePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KBJoint.KBCameraSpacePoint)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KBJoint.KBCameraSpacePoint)
  return target;
}

int KBJoint_KBCameraSpacePoint::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KBJoint_KBCameraSpacePoint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KBJoint_KBCameraSpacePoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KBJoint_KBCameraSpacePoint>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KBJoint_KBCameraSpacePoint::MergeFrom(const KBJoint_KBCameraSpacePoint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void KBJoint_KBCameraSpacePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KBJoint_KBCameraSpacePoint::CopyFrom(const KBJoint_KBCameraSpacePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KBJoint_KBCameraSpacePoint::IsInitialized() const {

  return true;
}

void KBJoint_KBCameraSpacePoint::Swap(KBJoint_KBCameraSpacePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KBJoint_KBCameraSpacePoint::InternalSwap(KBJoint_KBCameraSpacePoint* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KBJoint_KBCameraSpacePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KBJoint_KBCameraSpacePoint_descriptor_;
  metadata.reflection = KBJoint_KBCameraSpacePoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KBJoint::kTypeFieldNumber;
const int KBJoint::kPositionFieldNumber;
const int KBJoint::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KBJoint::KBJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KBJoint)
}

void KBJoint::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::KBJoint_KBCameraSpacePoint*>(&::KBJoint_KBCameraSpacePoint::default_instance());
}

KBJoint::KBJoint(const KBJoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KBJoint)
}

void KBJoint::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  position_ = NULL;
  state_ = 0;
}

KBJoint::~KBJoint() {
  // @@protoc_insertion_point(destructor:KBJoint)
  SharedDtor();
}

void KBJoint::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void KBJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KBJoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBJoint_descriptor_;
}

const KBJoint& KBJoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  return *default_instance_;
}

KBJoint* KBJoint::default_instance_ = NULL;

KBJoint* KBJoint::New(::google::protobuf::Arena* arena) const {
  KBJoint* n = new KBJoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KBJoint::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KBJoint*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, state_);
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool KBJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KBJoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KBJointType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::KBJointType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .KBJoint.KBCameraSpacePoint position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .KBJoint.KBTrackingState state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::KBJoint_KBTrackingState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KBJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KBJoint)
  return false;
#undef DO_
}

void KBJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KBJoint)
  // optional .KBJointType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .KBJoint.KBCameraSpacePoint position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .KBJoint.KBTrackingState state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:KBJoint)
}

::google::protobuf::uint8* KBJoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KBJoint)
  // optional .KBJointType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .KBJoint.KBCameraSpacePoint position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->position_, target);
  }

  // optional .KBJoint.KBTrackingState state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KBJoint)
  return target;
}

int KBJoint::ByteSize() const {
  int total_size = 0;

  // optional .KBJointType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .KBJoint.KBCameraSpacePoint position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .KBJoint.KBTrackingState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KBJoint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KBJoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KBJoint>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KBJoint::MergeFrom(const KBJoint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_position()) {
    mutable_position()->::KBJoint_KBCameraSpacePoint::MergeFrom(from.position());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void KBJoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KBJoint::CopyFrom(const KBJoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KBJoint::IsInitialized() const {

  return true;
}

void KBJoint::Swap(KBJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KBJoint::InternalSwap(KBJoint* other) {
  std::swap(type_, other->type_);
  std::swap(position_, other->position_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KBJoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KBJoint_descriptor_;
  metadata.reflection = KBJoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KBJoint_KBCameraSpacePoint

// optional float x = 1;
void KBJoint_KBCameraSpacePoint::clear_x() {
  x_ = 0;
}
 float KBJoint_KBCameraSpacePoint::x() const {
  // @@protoc_insertion_point(field_get:KBJoint.KBCameraSpacePoint.x)
  return x_;
}
 void KBJoint_KBCameraSpacePoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.KBCameraSpacePoint.x)
}

// optional float y = 2;
void KBJoint_KBCameraSpacePoint::clear_y() {
  y_ = 0;
}
 float KBJoint_KBCameraSpacePoint::y() const {
  // @@protoc_insertion_point(field_get:KBJoint.KBCameraSpacePoint.y)
  return y_;
}
 void KBJoint_KBCameraSpacePoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.KBCameraSpacePoint.y)
}

// optional float z = 3;
void KBJoint_KBCameraSpacePoint::clear_z() {
  z_ = 0;
}
 float KBJoint_KBCameraSpacePoint::z() const {
  // @@protoc_insertion_point(field_get:KBJoint.KBCameraSpacePoint.z)
  return z_;
}
 void KBJoint_KBCameraSpacePoint::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.KBCameraSpacePoint.z)
}

// -------------------------------------------------------------------

// KBJoint

// optional .KBJointType type = 1;
void KBJoint::clear_type() {
  type_ = 0;
}
 ::KBJointType KBJoint::type() const {
  // @@protoc_insertion_point(field_get:KBJoint.type)
  return static_cast< ::KBJointType >(type_);
}
 void KBJoint::set_type(::KBJointType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.type)
}

// optional .KBJoint.KBCameraSpacePoint position = 2;
bool KBJoint::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void KBJoint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::KBJoint_KBCameraSpacePoint& KBJoint::position() const {
  // @@protoc_insertion_point(field_get:KBJoint.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::KBJoint_KBCameraSpacePoint* KBJoint::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::KBJoint_KBCameraSpacePoint;
  }
  // @@protoc_insertion_point(field_mutable:KBJoint.position)
  return position_;
}
::KBJoint_KBCameraSpacePoint* KBJoint::release_position() {
  
  ::KBJoint_KBCameraSpacePoint* temp = position_;
  position_ = NULL;
  return temp;
}
void KBJoint::set_allocated_position(::KBJoint_KBCameraSpacePoint* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KBJoint.position)
}

// optional .KBJoint.KBTrackingState state = 4;
void KBJoint::clear_state() {
  state_ = 0;
}
 ::KBJoint_KBTrackingState KBJoint::state() const {
  // @@protoc_insertion_point(field_get:KBJoint.state)
  return static_cast< ::KBJoint_KBTrackingState >(state_);
}
 void KBJoint::set_state(::KBJoint_KBTrackingState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:KBJoint.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KBJointOrientation::kTypeFieldNumber;
const int KBJointOrientation::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KBJointOrientation::KBJointOrientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KBJointOrientation)
}

void KBJointOrientation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  orientation_ = const_cast< ::KBVector4*>(&::KBVector4::default_instance());
}

KBJointOrientation::KBJointOrientation(const KBJointOrientation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KBJointOrientation)
}

void KBJointOrientation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  orientation_ = NULL;
}

KBJointOrientation::~KBJointOrientation() {
  // @@protoc_insertion_point(destructor:KBJointOrientation)
  SharedDtor();
}

void KBJointOrientation::SharedDtor() {
  if (this != default_instance_) {
    delete orientation_;
  }
}

void KBJointOrientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KBJointOrientation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBJointOrientation_descriptor_;
}

const KBJointOrientation& KBJointOrientation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  return *default_instance_;
}

KBJointOrientation* KBJointOrientation::default_instance_ = NULL;

KBJointOrientation* KBJointOrientation::New(::google::protobuf::Arena* arena) const {
  KBJointOrientation* n = new KBJointOrientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KBJointOrientation::Clear() {
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}

bool KBJointOrientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KBJointOrientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KBJointType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::KBJointType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation;
        break;
      }

      // optional .KBVector4 orientation = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KBJointOrientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KBJointOrientation)
  return false;
#undef DO_
}

void KBJointOrientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KBJointOrientation)
  // optional .KBJointType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .KBVector4 orientation = 2;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // @@protoc_insertion_point(serialize_end:KBJointOrientation)
}

::google::protobuf::uint8* KBJointOrientation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KBJointOrientation)
  // optional .KBJointType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .KBVector4 orientation = 2;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->orientation_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KBJointOrientation)
  return target;
}

int KBJointOrientation::ByteSize() const {
  int total_size = 0;

  // optional .KBJointType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .KBVector4 orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KBJointOrientation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KBJointOrientation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KBJointOrientation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KBJointOrientation::MergeFrom(const KBJointOrientation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::KBVector4::MergeFrom(from.orientation());
  }
}

void KBJointOrientation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KBJointOrientation::CopyFrom(const KBJointOrientation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KBJointOrientation::IsInitialized() const {

  return true;
}

void KBJointOrientation::Swap(KBJointOrientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KBJointOrientation::InternalSwap(KBJointOrientation* other) {
  std::swap(type_, other->type_);
  std::swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KBJointOrientation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KBJointOrientation_descriptor_;
  metadata.reflection = KBJointOrientation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KBJointOrientation

// optional .KBJointType type = 1;
void KBJointOrientation::clear_type() {
  type_ = 0;
}
 ::KBJointType KBJointOrientation::type() const {
  // @@protoc_insertion_point(field_get:KBJointOrientation.type)
  return static_cast< ::KBJointType >(type_);
}
 void KBJointOrientation::set_type(::KBJointType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:KBJointOrientation.type)
}

// optional .KBVector4 orientation = 2;
bool KBJointOrientation::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void KBJointOrientation::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::KBVector4& KBJointOrientation::orientation() const {
  // @@protoc_insertion_point(field_get:KBJointOrientation.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::KBVector4* KBJointOrientation::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::KBVector4;
  }
  // @@protoc_insertion_point(field_mutable:KBJointOrientation.orientation)
  return orientation_;
}
::KBVector4* KBJointOrientation::release_orientation() {
  
  ::KBVector4* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void KBJointOrientation::set_allocated_orientation(::KBVector4* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KBJointOrientation.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* KBKinectBody_KBHandState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBKinectBody_KBHandState_descriptor_;
}
bool KBKinectBody_KBHandState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KBKinectBody_KBHandState KBKinectBody::UNKNOWN;
const KBKinectBody_KBHandState KBKinectBody::NOT_TRACKED;
const KBKinectBody_KBHandState KBKinectBody::OPEN;
const KBKinectBody_KBHandState KBKinectBody::CLOSED;
const KBKinectBody_KBHandState KBKinectBody::LASSO;
const KBKinectBody_KBHandState KBKinectBody::KBHandState_MIN;
const KBKinectBody_KBHandState KBKinectBody::KBHandState_MAX;
const int KBKinectBody::KBHandState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* KBKinectBody_KBTrackingConfidence_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBKinectBody_KBTrackingConfidence_descriptor_;
}
bool KBKinectBody_KBTrackingConfidence_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KBKinectBody_KBTrackingConfidence KBKinectBody::LOW;
const KBKinectBody_KBTrackingConfidence KBKinectBody::HIGH;
const KBKinectBody_KBTrackingConfidence KBKinectBody::KBTrackingConfidence_MIN;
const KBKinectBody_KBTrackingConfidence KBKinectBody::KBTrackingConfidence_MAX;
const int KBKinectBody::KBTrackingConfidence_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KBKinectBody::kIdFieldNumber;
const int KBKinectBody::kTimestampFieldNumber;
const int KBKinectBody::kLeftHandFieldNumber;
const int KBKinectBody::kRightHandFieldNumber;
const int KBKinectBody::kLeftHandConfidenceFieldNumber;
const int KBKinectBody::kRightHandConfidenceFieldNumber;
const int KBKinectBody::kClipFieldNumber;
const int KBKinectBody::kJointsFieldNumber;
const int KBKinectBody::kOrientationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KBKinectBody::KBKinectBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KBKinectBody)
}

void KBKinectBody::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  clip_ = const_cast< ::KBVector4*>(&::KBVector4::default_instance());
}

KBKinectBody::KBKinectBody(const KBKinectBody& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KBKinectBody)
}

void KBKinectBody::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  lefthand_ = 0;
  righthand_ = 0;
  lefthandconfidence_ = 0;
  righthandconfidence_ = 0;
  clip_ = NULL;
}

KBKinectBody::~KBKinectBody() {
  // @@protoc_insertion_point(destructor:KBKinectBody)
  SharedDtor();
}

void KBKinectBody::SharedDtor() {
  if (this != default_instance_) {
    delete clip_;
  }
}

void KBKinectBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KBKinectBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBKinectBody_descriptor_;
}

const KBKinectBody& KBKinectBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  return *default_instance_;
}

KBKinectBody* KBKinectBody::default_instance_ = NULL;

KBKinectBody* KBKinectBody::New(::google::protobuf::Arena* arena) const {
  KBKinectBody* n = new KBKinectBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KBKinectBody::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KBKinectBody*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, righthandconfidence_);
  if (GetArenaNoVirtual() == NULL && clip_ != NULL) delete clip_;
  clip_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  joints_.Clear();
  orientations_.Clear();
}

bool KBKinectBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KBKinectBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leftHand;
        break;
      }

      // optional .KBKinectBody.KBHandState leftHand = 3;
      case 3: {
        if (tag == 24) {
         parse_leftHand:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lefthand(static_cast< ::KBKinectBody_KBHandState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rightHand;
        break;
      }

      // optional .KBKinectBody.KBHandState rightHand = 4;
      case 4: {
        if (tag == 32) {
         parse_rightHand:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_righthand(static_cast< ::KBKinectBody_KBHandState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leftHandConfidence;
        break;
      }

      // optional .KBKinectBody.KBTrackingConfidence leftHandConfidence = 5;
      case 5: {
        if (tag == 40) {
         parse_leftHandConfidence:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lefthandconfidence(static_cast< ::KBKinectBody_KBTrackingConfidence >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rightHandConfidence;
        break;
      }

      // optional .KBKinectBody.KBTrackingConfidence rightHandConfidence = 6;
      case 6: {
        if (tag == 48) {
         parse_rightHandConfidence:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_righthandconfidence(static_cast< ::KBKinectBody_KBTrackingConfidence >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_clip;
        break;
      }

      // optional .KBVector4 clip = 7;
      case 7: {
        if (tag == 58) {
         parse_clip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_joints;
        break;
      }

      // repeated .KBJoint joints = 8;
      case 8: {
        if (tag == 66) {
         parse_joints:
          DO_(input->IncrementRecursionDepth());
         parse_loop_joints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_joints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_joints;
        if (input->ExpectTag(74)) goto parse_loop_orientations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .KBJointOrientation orientations = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_orientations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_orientations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_orientations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KBKinectBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KBKinectBody)
  return false;
#undef DO_
}

void KBKinectBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KBKinectBody)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional .KBKinectBody.KBHandState leftHand = 3;
  if (this->lefthand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->lefthand(), output);
  }

  // optional .KBKinectBody.KBHandState rightHand = 4;
  if (this->righthand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->righthand(), output);
  }

  // optional .KBKinectBody.KBTrackingConfidence leftHandConfidence = 5;
  if (this->lefthandconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->lefthandconfidence(), output);
  }

  // optional .KBKinectBody.KBTrackingConfidence rightHandConfidence = 6;
  if (this->righthandconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->righthandconfidence(), output);
  }

  // optional .KBVector4 clip = 7;
  if (this->has_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->clip_, output);
  }

  // repeated .KBJoint joints = 8;
  for (unsigned int i = 0, n = this->joints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->joints(i), output);
  }

  // repeated .KBJointOrientation orientations = 9;
  for (unsigned int i = 0, n = this->orientations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->orientations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:KBKinectBody)
}

::google::protobuf::uint8* KBKinectBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KBKinectBody)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional .KBKinectBody.KBHandState leftHand = 3;
  if (this->lefthand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->lefthand(), target);
  }

  // optional .KBKinectBody.KBHandState rightHand = 4;
  if (this->righthand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->righthand(), target);
  }

  // optional .KBKinectBody.KBTrackingConfidence leftHandConfidence = 5;
  if (this->lefthandconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->lefthandconfidence(), target);
  }

  // optional .KBKinectBody.KBTrackingConfidence rightHandConfidence = 6;
  if (this->righthandconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->righthandconfidence(), target);
  }

  // optional .KBVector4 clip = 7;
  if (this->has_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->clip_, target);
  }

  // repeated .KBJoint joints = 8;
  for (unsigned int i = 0, n = this->joints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->joints(i), target);
  }

  // repeated .KBJointOrientation orientations = 9;
  for (unsigned int i = 0, n = this->orientations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->orientations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KBKinectBody)
  return target;
}

int KBKinectBody::ByteSize() const {
  int total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .KBKinectBody.KBHandState leftHand = 3;
  if (this->lefthand() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lefthand());
  }

  // optional .KBKinectBody.KBHandState rightHand = 4;
  if (this->righthand() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->righthand());
  }

  // optional .KBKinectBody.KBTrackingConfidence leftHandConfidence = 5;
  if (this->lefthandconfidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lefthandconfidence());
  }

  // optional .KBKinectBody.KBTrackingConfidence rightHandConfidence = 6;
  if (this->righthandconfidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->righthandconfidence());
  }

  // optional .KBVector4 clip = 7;
  if (this->has_clip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clip_);
  }

  // repeated .KBJoint joints = 8;
  total_size += 1 * this->joints_size();
  for (int i = 0; i < this->joints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joints(i));
  }

  // repeated .KBJointOrientation orientations = 9;
  total_size += 1 * this->orientations_size();
  for (int i = 0; i < this->orientations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orientations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KBKinectBody::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KBKinectBody* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KBKinectBody>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KBKinectBody::MergeFrom(const KBKinectBody& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  joints_.MergeFrom(from.joints_);
  orientations_.MergeFrom(from.orientations_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.lefthand() != 0) {
    set_lefthand(from.lefthand());
  }
  if (from.righthand() != 0) {
    set_righthand(from.righthand());
  }
  if (from.lefthandconfidence() != 0) {
    set_lefthandconfidence(from.lefthandconfidence());
  }
  if (from.righthandconfidence() != 0) {
    set_righthandconfidence(from.righthandconfidence());
  }
  if (from.has_clip()) {
    mutable_clip()->::KBVector4::MergeFrom(from.clip());
  }
}

void KBKinectBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KBKinectBody::CopyFrom(const KBKinectBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KBKinectBody::IsInitialized() const {

  return true;
}

void KBKinectBody::Swap(KBKinectBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KBKinectBody::InternalSwap(KBKinectBody* other) {
  std::swap(id_, other->id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(lefthand_, other->lefthand_);
  std::swap(righthand_, other->righthand_);
  std::swap(lefthandconfidence_, other->lefthandconfidence_);
  std::swap(righthandconfidence_, other->righthandconfidence_);
  std::swap(clip_, other->clip_);
  joints_.UnsafeArenaSwap(&other->joints_);
  orientations_.UnsafeArenaSwap(&other->orientations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KBKinectBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KBKinectBody_descriptor_;
  metadata.reflection = KBKinectBody_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KBKinectBody

// optional uint64 id = 1;
void KBKinectBody::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 KBKinectBody::id() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.id)
  return id_;
}
 void KBKinectBody::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.id)
}

// optional int64 timestamp = 2;
void KBKinectBody::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 KBKinectBody::timestamp() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.timestamp)
  return timestamp_;
}
 void KBKinectBody::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.timestamp)
}

// optional .KBKinectBody.KBHandState leftHand = 3;
void KBKinectBody::clear_lefthand() {
  lefthand_ = 0;
}
 ::KBKinectBody_KBHandState KBKinectBody::lefthand() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.leftHand)
  return static_cast< ::KBKinectBody_KBHandState >(lefthand_);
}
 void KBKinectBody::set_lefthand(::KBKinectBody_KBHandState value) {
  
  lefthand_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.leftHand)
}

// optional .KBKinectBody.KBHandState rightHand = 4;
void KBKinectBody::clear_righthand() {
  righthand_ = 0;
}
 ::KBKinectBody_KBHandState KBKinectBody::righthand() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.rightHand)
  return static_cast< ::KBKinectBody_KBHandState >(righthand_);
}
 void KBKinectBody::set_righthand(::KBKinectBody_KBHandState value) {
  
  righthand_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.rightHand)
}

// optional .KBKinectBody.KBTrackingConfidence leftHandConfidence = 5;
void KBKinectBody::clear_lefthandconfidence() {
  lefthandconfidence_ = 0;
}
 ::KBKinectBody_KBTrackingConfidence KBKinectBody::lefthandconfidence() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.leftHandConfidence)
  return static_cast< ::KBKinectBody_KBTrackingConfidence >(lefthandconfidence_);
}
 void KBKinectBody::set_lefthandconfidence(::KBKinectBody_KBTrackingConfidence value) {
  
  lefthandconfidence_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.leftHandConfidence)
}

// optional .KBKinectBody.KBTrackingConfidence rightHandConfidence = 6;
void KBKinectBody::clear_righthandconfidence() {
  righthandconfidence_ = 0;
}
 ::KBKinectBody_KBTrackingConfidence KBKinectBody::righthandconfidence() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.rightHandConfidence)
  return static_cast< ::KBKinectBody_KBTrackingConfidence >(righthandconfidence_);
}
 void KBKinectBody::set_righthandconfidence(::KBKinectBody_KBTrackingConfidence value) {
  
  righthandconfidence_ = value;
  // @@protoc_insertion_point(field_set:KBKinectBody.rightHandConfidence)
}

// optional .KBVector4 clip = 7;
bool KBKinectBody::has_clip() const {
  return !_is_default_instance_ && clip_ != NULL;
}
void KBKinectBody::clear_clip() {
  if (GetArenaNoVirtual() == NULL && clip_ != NULL) delete clip_;
  clip_ = NULL;
}
const ::KBVector4& KBKinectBody::clip() const {
  // @@protoc_insertion_point(field_get:KBKinectBody.clip)
  return clip_ != NULL ? *clip_ : *default_instance_->clip_;
}
::KBVector4* KBKinectBody::mutable_clip() {
  
  if (clip_ == NULL) {
    clip_ = new ::KBVector4;
  }
  // @@protoc_insertion_point(field_mutable:KBKinectBody.clip)
  return clip_;
}
::KBVector4* KBKinectBody::release_clip() {
  
  ::KBVector4* temp = clip_;
  clip_ = NULL;
  return temp;
}
void KBKinectBody::set_allocated_clip(::KBVector4* clip) {
  delete clip_;
  clip_ = clip;
  if (clip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KBKinectBody.clip)
}

// repeated .KBJoint joints = 8;
int KBKinectBody::joints_size() const {
  return joints_.size();
}
void KBKinectBody::clear_joints() {
  joints_.Clear();
}
const ::KBJoint& KBKinectBody::joints(int index) const {
  // @@protoc_insertion_point(field_get:KBKinectBody.joints)
  return joints_.Get(index);
}
::KBJoint* KBKinectBody::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:KBKinectBody.joints)
  return joints_.Mutable(index);
}
::KBJoint* KBKinectBody::add_joints() {
  // @@protoc_insertion_point(field_add:KBKinectBody.joints)
  return joints_.Add();
}
::google::protobuf::RepeatedPtrField< ::KBJoint >*
KBKinectBody::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:KBKinectBody.joints)
  return &joints_;
}
const ::google::protobuf::RepeatedPtrField< ::KBJoint >&
KBKinectBody::joints() const {
  // @@protoc_insertion_point(field_list:KBKinectBody.joints)
  return joints_;
}

// repeated .KBJointOrientation orientations = 9;
int KBKinectBody::orientations_size() const {
  return orientations_.size();
}
void KBKinectBody::clear_orientations() {
  orientations_.Clear();
}
const ::KBJointOrientation& KBKinectBody::orientations(int index) const {
  // @@protoc_insertion_point(field_get:KBKinectBody.orientations)
  return orientations_.Get(index);
}
::KBJointOrientation* KBKinectBody::mutable_orientations(int index) {
  // @@protoc_insertion_point(field_mutable:KBKinectBody.orientations)
  return orientations_.Mutable(index);
}
::KBJointOrientation* KBKinectBody::add_orientations() {
  // @@protoc_insertion_point(field_add:KBKinectBody.orientations)
  return orientations_.Add();
}
::google::protobuf::RepeatedPtrField< ::KBJointOrientation >*
KBKinectBody::mutable_orientations() {
  // @@protoc_insertion_point(field_mutable_list:KBKinectBody.orientations)
  return &orientations_;
}
const ::google::protobuf::RepeatedPtrField< ::KBJointOrientation >&
KBKinectBody::orientations() const {
  // @@protoc_insertion_point(field_list:KBKinectBody.orientations)
  return orientations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KBKinectBodies::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KBKinectBodies::KBKinectBodies()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KBKinectBodies)
}

void KBKinectBodies::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KBKinectBodies::KBKinectBodies(const KBKinectBodies& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KBKinectBodies)
}

void KBKinectBodies::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

KBKinectBodies::~KBKinectBodies() {
  // @@protoc_insertion_point(destructor:KBKinectBodies)
  SharedDtor();
}

void KBKinectBodies::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KBKinectBodies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KBKinectBodies::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KBKinectBodies_descriptor_;
}

const KBKinectBodies& KBKinectBodies::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectServer_2fKinectBody_2eproto();
  return *default_instance_;
}

KBKinectBodies* KBKinectBodies::default_instance_ = NULL;

KBKinectBodies* KBKinectBodies::New(::google::protobuf::Arena* arena) const {
  KBKinectBodies* n = new KBKinectBodies;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KBKinectBodies::Clear() {
  body_.Clear();
}

bool KBKinectBodies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KBKinectBodies)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KBKinectBody body = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_body;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KBKinectBodies)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KBKinectBodies)
  return false;
#undef DO_
}

void KBKinectBodies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KBKinectBodies)
  // repeated .KBKinectBody body = 1;
  for (unsigned int i = 0, n = this->body_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->body(i), output);
  }

  // @@protoc_insertion_point(serialize_end:KBKinectBodies)
}

::google::protobuf::uint8* KBKinectBodies::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KBKinectBodies)
  // repeated .KBKinectBody body = 1;
  for (unsigned int i = 0, n = this->body_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->body(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KBKinectBodies)
  return target;
}

int KBKinectBodies::ByteSize() const {
  int total_size = 0;

  // repeated .KBKinectBody body = 1;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KBKinectBodies::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KBKinectBodies* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KBKinectBodies>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KBKinectBodies::MergeFrom(const KBKinectBodies& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  body_.MergeFrom(from.body_);
}

void KBKinectBodies::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KBKinectBodies::CopyFrom(const KBKinectBodies& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KBKinectBodies::IsInitialized() const {

  return true;
}

void KBKinectBodies::Swap(KBKinectBodies* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KBKinectBodies::InternalSwap(KBKinectBodies* other) {
  body_.UnsafeArenaSwap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KBKinectBodies::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KBKinectBodies_descriptor_;
  metadata.reflection = KBKinectBodies_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KBKinectBodies

// repeated .KBKinectBody body = 1;
int KBKinectBodies::body_size() const {
  return body_.size();
}
void KBKinectBodies::clear_body() {
  body_.Clear();
}
const ::KBKinectBody& KBKinectBodies::body(int index) const {
  // @@protoc_insertion_point(field_get:KBKinectBodies.body)
  return body_.Get(index);
}
::KBKinectBody* KBKinectBodies::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:KBKinectBodies.body)
  return body_.Mutable(index);
}
::KBKinectBody* KBKinectBodies::add_body() {
  // @@protoc_insertion_point(field_add:KBKinectBodies.body)
  return body_.Add();
}
::google::protobuf::RepeatedPtrField< ::KBKinectBody >*
KBKinectBodies::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:KBKinectBodies.body)
  return &body_;
}
const ::google::protobuf::RepeatedPtrField< ::KBKinectBody >&
KBKinectBodies::body() const {
  // @@protoc_insertion_point(field_list:KBKinectBodies.body)
  return body_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
